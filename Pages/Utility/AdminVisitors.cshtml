@page
@model AdminVisitorsModel

@using Microsoft.AspNetCore.Identity
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor httpContextAccessor

@{
    ViewData["Title"] = "Visitors";
}

<div class="text-center container-fluid">
    <h1 class="display-4">Website Visitors</h1>
    <hr />
    <div class="row">
        @* Photos *@
        <div class="col-md">
            <div class="row-auto">
                <div id="mapId" style="height:650px;"></div>
            </div>
        </div>
    </div>
</div>

@section Scripts{
    <script type="text/javascript">
        var token = 'cGsuZXlKMUlqb2laM1Z0YVc1bGNpSXNJbUVpT2lKamEyZzNNbVJsYlhjd00zRXdNbkZ1YkhWek0yZG1ibXd6SW4wLkMtTGZmeWNocllTYV9hSmNYT0ZpMnc'

        var locations = []
        var hackLocations = []
        var cursoryVisitors = []
        @foreach (var visit in Model.LocationTimeVisits)
        {
            if (visit.HackAttempt)
            {
                <text>
                hackLocations.push(L.marker([@visit.Latitude, @visit.Longitude]).bindPopup("⚙ @visit.IP", { autoClose: false, closeButton: false }));
                </text>
            }
            else if (!visit.VisitedPages || visit.IsRobot)
            {
                <text>
                cursoryVisitors.push(L.marker([@visit.Latitude, @visit.Longitude]).bindPopup("🤖 @visit.IP", { autoClose: false, closeButton: false }));
                </text>
            }
            else
            {
                <text>
                locations.push(L.marker([@visit.Latitude, @visit.Longitude]).bindPopup("@visit.IP", { autoClose: false, closeButton: false }));
                </text>
            }
        }

        var locationsLayer = L.layerGroup(locations);
        var hackLayer = L.layerGroup(hackLocations);
        var cursoryLayer = L.layerGroup(cursoryVisitors);

        var tileLayer = L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}', {
        attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',
            maxZoom: 18,
            id: 'mapbox/streets-v11',
            tileSize: 512,
            zoomOffset: -1,
            accessToken: atob(token),

            useCache: true,
            crossOrigin: true,
            cacheMaxAge: (24 * 3600 * 1000) * 10
        });

        var hits = 0
        var misses = 0;
        var errors = 0;
        tileLayer.on('tilecachehit', function (ev) {
            console.log('Cache hit: ', ev.url, " " , hits, " " , misses, " " , errors);
            hits += 1;
        });
        tileLayer.on('tilecachemiss', function (ev) {
            console.log('Cache miss: ', ev.url, " ", hits, " ", misses, " ", errors);
            misses += 1;
        });
        tileLayer.on('tilecacheerror', function (ev) {
            console.log('Cache error: ', ev.tile, ev.error, " ", hits, " ", misses, " ", errors);
            errors += 1;
        });

        var visitingMap = L.map('mapId', {
        center: [47.6358, -122.1419],
            zoom: 10,
            layers: [tileLayer, locationsLayer]
        });

        L.control.layers({}, { "Visitors": locationsLayer, "Hackers": hackLayer, "Cursory Visits": cursoryLayer }).addTo(visitingMap);

        // Rather hacky way to open all popups at startup and when a layer is clicked
        Object.values(locationsLayer._layers).forEach(layer => layer.openPopup());
        Object.values(hackLayer._layers).forEach(layer => layer.openPopup());
        Object.values(cursoryLayer._layers).forEach(layer => layer.openPopup());

        visitingMap.on('overlayadd', onOverlayAdd);
        function onOverlayAdd(e) {
            Object.values(e.layer._layers).forEach(layer => layer.openPopup());
        }

        var popup = L.popup();
        function onMapClick(e)
        {
            popup
                .setLatLng(e.latlng)
                .setContent("You clicked the map at " + e.latlng.toString())
                .openOn(visitingMap);
        }

        visitingMap.on('click', onMapClick);
    </script>
}