@page
@model VisitingWaModel

@using Microsoft.AspNetCore.Identity
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor httpContextAccessor

@{
    ViewData["Title"] = "Visitors";
}

<div class="text-center container-fluid">
    <h1 class="display-4">Website Visitors</h1>
    <hr />
    <div class="row">
        @* Photos *@
        <div class="col-md">
            <div class="row-auto">
                <div id="mapId" style="height:650px;"></div>
            </div>
        </div>
    </div>
</div>

@section Scripts{
    <script type="text/javascript">
        var token = 'cGsuZXlKMUlqb2laM1Z0YVc1bGNpSXNJbUVpT2lKamEyZzNNbVJsYlhjd00zRXdNbkZ1YkhWek0yZG1ibXd6SW4wLkMtTGZmeWNocllTYV9hSmNYT0ZpMnc'

        var kerryPark = L.marker([47.629601, -122.360015]).bindPopup("🌲 Kerry Park", { autoClose: false, closeButton: false });
        var rattlesnake = L.marker([47.432999, -121.767139]).bindPopup("🌲 Rattlesnake Ledge", { autoClose: false, closeButton: false });
        var alki = L.marker([47.58174, -122.405194]).bindPopup("🌲 Alki Beach", { autoClose: false, closeButton: false });
        var gasworks = L.marker([47.645401, -122.33492]).bindPopup("🌲 Alki Beach", { autoClose: false, closeButton: false });
        var kubota = L.marker([47.51396, -122.265794]).bindPopup("🌲 Kubota Garden", { autoClose: false, closeButton: false });
        var wallace = L.marker([47.867292, -121.681381]).bindPopup("🌲 Wallace Falls", { autoClose: false, closeButton: false });

        var sushiMe = L.marker([47.621299, -122.132778]).bindPopup("🍣 SushiMe", { autoClose: false, closeButton: false });

        var round1 = L.marker([47.460109, -122.256104]).bindPopup("🎮 Round1", { autoClose: false, closeButton: false });
        var fullTilt = L.marker([47.667928, -122.383794]).bindPopup("🎮 Full Tilt", { autoClose: false, closeButton: false });

        var kayaking = L.marker([47.638213, -122.340252]).bindPopup("⛴ NWOC Kayaking", { autoClose: false, closeButton: false });
        var ferry = L.marker([47.81261, -122.382713]).bindPopup("⛴ Edmonds Ferry", { autoClose: false, closeButton: false });

        var outdoorLayer = L.layerGroup([kerryPark, rattlesnake, alki, gasworks, kubota, wallace]);
        var foodLayer = L.layerGroup([sushiMe]);
        var arcadeLayer = L.layerGroup([round1, fullTilt]);
        var waterLayer = L.layerGroup([kayaking, ferry]);

        var tileLayer = L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}', {
            attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',
            maxZoom: 18,
            id: 'mapbox/streets-v11',
            tileSize: 512,
            zoomOffset: -1,
            accessToken: atob(token),

            useCache: true,
            crossOrigin: true,
            cacheMaxAge: (24 * 3600 * 1000) * 10
        });

        @if (httpContextAccessor.HttpContext.User.IsInRole("Admin"))
        {
            <text>
        var hits = 0
        var misses = 0;
        var errors = 0;
        tileLayer.on('tilecachehit', function (ev) {
            console.log('Cache hit: ', ev.url, " " , hits, " " , misses, " " , errors);
            hits += 1;
        });
        tileLayer.on('tilecachemiss', function (ev) {
            console.log('Cache miss: ', ev.url, " ", hits, " ", misses, " ", errors);
            misses += 1;
        });
        tileLayer.on('tilecacheerror', function (ev) {
            console.log('Cache error: ', ev.tile, ev.error, " ", hits, " ", misses, " ", errors);
            errors += 1;
        });
            </text>
        }

        var visitingMap = L.map('mapId', {
            center: [47.6358, -122.1419],
            zoom: 10,
            layers: [tileLayer, outdoorLayer, foodLayer, arcadeLayer, waterLayer]
        });

        L.control.layers({}, { "🌲 Outdoors": outdoorLayer, "🍣 Food": foodLayer, "🎮 Arcade": arcadeLayer, '⛴ Water': waterLayer }).addTo(visitingMap);

        // Rather hacky way to open all popups at startup and when a layer is clicked
        Object.values(outdoorLayer._layers).forEach(layer => layer.openPopup());
        Object.values(foodLayer._layers).forEach(layer => layer.openPopup());
        Object.values(arcadeLayer._layers).forEach(layer => layer.openPopup());
        Object.values(waterLayer._layers).forEach(layer => layer.openPopup());

        visitingMap.on('overlayadd', onOverlayAdd);
        function onOverlayAdd(e) {
            Object.values(e.layer._layers).forEach(layer => layer.openPopup());
        }

        // Admin-only click help text.
        @if (httpContextAccessor.HttpContext.User.IsInRole("Admin"))
        {
            <text>
            var popup = L.popup();
            function onMapClick(e)
            {
                popup
                    .setLatLng(e.latlng)
                    .setContent("You clicked the map at " + e.latlng.toString())
                    .openOn(visitingMap);
            }

            visitingMap.on('click', onMapClick);
            </text>
        }
    </script>
}